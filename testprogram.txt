[[(fun v -> IF v THEN x + 1 ELSE y) (1 + 2)]]_{k}

program 'eval('0(.KList), 'trans('app('fun($v(.KList), 'bigIf($v(.KList), 'bin('plus(.KList), $x(.KList), '1(.KList)), $y(.KList))), 'bin('plus(.KList), '1(.KList), '2(.KList))), $k(.KList)),
    ListCon(ListItem('pair('trans('bin('plus(.KList), '1(.KList), '2(.KList)),
            'fn($v2(.KList), 'trans('fun($v(.KList), 'bigIf($v(.KList), 'bin('plus(.KList), $x(.KList), '1(.KList)), $y(.KList))),'fn($v1(.KList), 'app($v1(.KList), 'app($v2(.KList), $k(.KList))))))), 'apprule(.KList))),
     ListItem('pair('trans('bin('plus(.KList), '1(.KList), '2(.KList)),
            'fn($v2(.KList),
  'app('fn($v1(.KList), 'app($v1(.KList), 'app($v2(.KList), $k(.KList)))), 'bigFun($v(.KList), 
       'fn($v1(.KList), 'app($v1(.KList), 'app($v2(.KList), $k(.KList)))),
       'trans('bigIf($v(.KList), 'bin('plus(.KList), $x(.KList), '1(.KList)), $y(.KList)),
            'fn($v1(.KList), 'app($v1(.KList), 'app($v2(.KList), $k(.KList))))))))), 'funrule(.KList)))))

[[let x = y + 1 in x * 2]]_{k}

  program 'eval('0(.KList), 'trans('let($x(.KList),
            'bin('plus(.KList), $y(.KList), '1(.KList)), 'bin('times(.KList), $x(.KList), '2(.KList))), $k(.KList)),
    ListCon(ListItem('pair('trans('bin('plus(.KList), $y(.KList), '1(.KList)),
            'fn($x(.KList), 'trans('bin('times(.KList), $x(.KList), '2(.KList)), $k(.KList)))), 'letrule(.KList))),
         ListItem('pair(
    'trans('1(.KList), 'fn($v2(.KList), 'trans($y(.KList), 'fn($v1(.KList),
          'app('fn($x(.KList), 'trans('bin('times(.KList), $x(.KList), '2(.KList)), $k(.KList))),        
            'bin('plus(.KList), $v1(.KList), $v2(.KList))))))), 'oprule(.KList)))))

runCPS "[[f]]_{k} => k((f)) by var";;

runCPS "[[1.1]]_{k} => k((1.1)) by const";;

runCPS "[[IF x THEN 1 ELSE 1]]_{k} => undefined"

runCPS "[[x + 1]]_{k} => [[1]]_{FN v2 -> [[x]]_{FN v1 -> k ((v1) + (v2))}} by oprule
                => [[1]]_{FN v2 -> (FN v1 -> k ((v1) + (v2))) x} by var
              => (FN v2 -> (FN v1 -> k ((v1) + (v2))) x) 1 by const";;

runCPS "[[let x = y + 1 in x * 2]]_{k} => [[y + 1]]_{FN x -> [[x * 2]]_{k}} by letrule
           => [[y + 1]]_{FN x -> [[2]]_{FN v2 -> [[x]]_{FN v1 -> k (v1 * v2)}}} by oprule
          => [[1]]_{FN v4 -> [[y]]_{FN v3 ->
       (FN x -> [[2]]_{FN v2 -> [[x]]_{FN v1 -> k (v1 * v2)}}) (v3 + v4)}} by oprule";;

runCPS "[[(fun v -> if v then x + 1 else y) (1 + 2)]]_{k}
       => [[(1 + 2)]]_{FN v2 -> [[(fun v -> if v then x + 1 else y)]]_{FN v1 -> v1 v2 k}} by apprule
       => [[(1 + 2)]]_{FN v2 -> (FN v1 -> v1 v2 k)
             (FUN v (FN v1 -> v1 v2 k) -> [[if v then x + 1 else y]]_{FN v1 -> v1 v2 k})} by funrule"

